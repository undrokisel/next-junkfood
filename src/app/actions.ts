'use server';

import { CheckoutFormValues } from '@/shared/constants/checkout-form-schema';
import { cookies } from 'next/headers';
import { hashSync } from 'bcrypt';
import {
  PayOrderTemplate,
  VerificationUserTemplate,
} from '@/components/shared/email-templates';
import { sendEmail, createPayment, getUserSession } from '@/shared/lib';
import { OrderStatus, Prisma } from '@prisma/client';
import { prisma } from '../../prisma/prisma-client';

export async function createOrder(data: CheckoutFormValues) {
  try {
    const cookieStore = cookies();
    const cartToken = cookieStore.get('cartToken')?.value;

    if (!cartToken) throw new Error('Cart token not found');

    /* –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ —Ç–æ–∫–µ–Ω—É */
    const userCart = await prisma.cart.findFirst({
      include: {
        user: true,
        items: {
          include: {
            ingredients: true,
            productVariant: {
              include: {
                product: true,
              },
            },
          },
        },
      },
      where: {
        token: cartToken,
      },
    });

    if (!userCart) throw new Error('Cart not found');

    /* –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è –≤–æ–∑—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É */
    if (userCart?.totalAmount === 0) throw new Error('Cart is empty');

    /* –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ */
    const order = await prisma.order.create({
      data: {
        // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏/–∫—É—Ä—å–µ—Ä–∞
        fullName: `${data.firstName} ${data.lastName}`,
        email: data.email,
        phone: data.phone,
        address: data.address,
        comment: data.comment,

        totalAmount: userCart.totalAmount,
        status: OrderStatus.PENDING,
        items: JSON.stringify(userCart.items),

        token: cartToken,

        // paymentType: PaymentType
        // deliveryType DeliveryType
        // paymentId String?
      },
    });

    /* –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É */
    // –í–∞–∂–Ω–æ! –Ω–µ —É–¥–∞–ª—è–µ–º!
    await prisma.cart.update({
      where: {
        id: userCart.id,
      },
      data: {
        totalAmount: 0,
      },
    });

    // —É–¥–∞–ª—è–µ–º –∏–∑ —Å–≤—è–∑–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –∫–æ—Ä–∑–∏–Ω–µ
    await prisma.cartItem.deleteMany({
      where: {
        cartId: userCart.id,
      },
    });

    // —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    const paymentData = await createPayment({
      amount: order.totalAmount,
      descrition: `–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ # ${order.id}`,
      orderId: order.id,
    });

    if (!paymentData) throw new Error('Payment data not found');

    await prisma.order.update({
      where: {
        id: order.id,
      },
      data: {
        paymentId: paymentData.id,
      },
    });

    const paymentUrl = paymentData.confirmation.confirmation_url;

    await sendEmail(
      data.email,
      `–¢–≤–æ—è –®–∞—É—Ä–º–∞ / –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ ‚Ññ ${order.id}`,
      PayOrderTemplate({
        orderId: order.id,
        totalAmount: order.totalAmount,
        paymentUrl,
      })
    );

    return paymentUrl;
  } catch (error) {
    // eslint-disable-next-line
    console.log('[CreateOrder] Server error', error);
    throw error;
  }
}

export async function updateUserInfo(body: Prisma.UserUpdateInput) {
  try {
    // –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const currentUser = await getUserSession();

    if (!currentUser) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    // –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã,
    // –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º
    // –≤–æ –≤—Ö–æ–¥—è—â–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö body –Ω–µ –±—É–¥–µ—Ç –ø–∞—Ä–æ–ª—è
    // —Ç–æ–≥–¥–∞ –ø–∞—Ä–æ–ª—å –¥–æ—Å—Ç–∞–Ω–µ–º –æ—Ç—Å—é–¥–∞
    const findUser = await prisma.user.findFirst({
      where: {
        id: Number(currentUser.id),
      },
    });

    await prisma.user.update({
      where: {
        id: Number(currentUser.id),
      },
      data: {
        fullName: body.fullName,
        email: body.email,
        password: body.password
          ? hashSync(body.password as string, 10)
          : findUser?.password,
      },
    });
  } catch (error) {
    // eslint-disable-next-line
    console.log('[updateUserInfo] Server error', error);
    throw error;
  }
}

export async function registerUser(body: Prisma.UserCreateInput) {
  try {
    const user = await prisma.user.findFirst({
      where: {
        email: body.email,
      },
    });

    if (user) {
      if (!user.email) throw new Error('–ü–æ—á—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    const createdUser = await prisma.user.create({
      data: {
        fullName: body.fullName,
        email: body.email,
        password: hashSync(body.email, 10),
      },
    });

    // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    // –Ω–∞ –ø–æ—á—Ç—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
    const code = Math.floor(10000 + Math.random() * 900000).toString();

    await prisma.verificationCode.create({
      data: {
        code,
        userId: createdUser.id,
      },
    });

    await sendEmail(
      createdUser.email,
      '–¢–≤–æ—è —à–∞—É—Ä–º–∞ / üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      VerificationUserTemplate({
        code,
      })
    );
  } catch (error) {
    // eslint-disable-next-line
    console.log('Error [CREATE_USER]', error);
    throw error;
  }
}

// Error: Attempted to call
// the default export of C:\react-projects\next-junkfood\node_modules\next\dist\client\link.js
// from the server but it's on the client.
// It's not possible to invoke a client function from the server,
// it can only be rendered as a Component or passed to props of a Client Component.

// ! –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–æ—á—Ç—É!
