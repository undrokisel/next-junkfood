import { sendEmail } from '@/shared/lib';
import { OrderStatus } from '@prisma/client';
import { NextRequest, NextResponse } from 'next/server';
import { OrderSuccessTemplate } from '@/components/shared/email-templates';
import { CartItemDTO } from '@/services/dto/cart.dto';
import { PaymentCallbackData } from '../../../../../@types/yookassa';
import { prisma } from '../../../../../prisma/prisma-client';

// –∫–æ–ª–ª–±–µ–∫ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –æ–± —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã
export async function POST(req: NextRequest) {
  try {
    // –æ—Ç–≤–µ—Ç –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    const body = (await req.json()) as PaymentCallbackData;

    // –∏—â–µ–º —É —Å–µ–±—è –≤ –±–∞–∑–µ –∑–∞–∫–∞–∑, –æ –∫–æ—Ç–æ—Ä–æ–º —Ä–µ—á—å
    const order = await prisma.order.findFirst({
      where: {
        // –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ, —Ä–∞–Ω–µ–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É,
        // –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å–≤–∏—Å—É –≤ –º–µ—Ç–∞–¥–∞—Ç—É
        // –Ω—É–∂–Ω—ã–µ –Ω–∞–º –¥–∞–Ω–Ω—ã–µ,
        // –ø–æ –∫–æ—Ç–æ—Ä—ã–º –¥–∞–ª–µ–µ (—Å–µ–π—á–∞—Å) –∏ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —É —Å–µ–±—è –∑–∞–∫–∞–∑
        id: Number(body.object.metadata.order_id),
      },
    });

    // –≤—Å–µ, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç–∞—Ö –∑–¥–µ—Å—å,
    // –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    // –∏ —Ç–∞–º –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ª–æ–≥–∞—Ö
    // –∏ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ, –±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–ª–∞—Ç–µ–∂–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É
    if (!order) return NextResponse.json({ error: 'Order not found' });

    // –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
    const isSucceeded = body.object.status === 'succeeded';

    // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    await prisma.order.update({
      where: {
        id: order.id,
      },
      data: {
        status: isSucceeded ? OrderStatus.PAYD : OrderStatus.CANCELLED,
      },
    });

    // –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –º–æ–¥–µ–ª–∏ –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ—á–Ω—è —Ç–æ–≤–∞—Ä–æ–≤
    const items = JSON.parse(order?.items as string) as CartItemDTO[];

    // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ email –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    if (isSucceeded) {
      await sendEmail(
        order.email,
        '–¢–≤–æ—è —à–∞—É—Ä–º–∞ / –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω üéâ',
        OrderSuccessTemplate({ orderId: order.id, items })
      );
      return NextResponse.json('Success');
    }
    // –ü–∏—Å—å–º–æ –æ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞' });
  } catch (error) {
    // eslint-disable-next-line
    console.log('[Checkout Callback] Error:', error);
    return NextResponse.json({ error: 'Server error' });
  }
}
